<?php
/**
 * @CreateTime:   2021/1/3 1:21 上午
 * @Author:       huizhang  <2788828128@qq.com>
 * @Copyright:    copyright(2020) Easyswoole all rights reserved
 * @Description:  消费进程
 */

namespace Huizhang\UniversalQueue\Core;

use EasySwoole\Component\Process\Socket\AbstractUnixProcess;
use EasySwoole\Component\Process\Socket\UnixProcessConfig;
use Huizhang\UniversalQueue\Unit\QueueDataCache;
use Swoole\Coroutine;
use Swoole\Coroutine\Socket;

class ConsumerProcess extends AbstractUnixProcess
{

    public function __construct(UnixProcessConfig $config)
    {
        /** @var $queue Queue */
        $queue = $config->getArg();
        QueueDataCache::init($queue);
        $this->addTick(30000, function () use ($queue) {
            $logFile = QueueDataCache::getCurrentLogFile($queue->getAlias(), time()-60*60*$queue->getRetainLogNum());
            if (file_exists($logFile)) {
                unlink($logFile);
            }
        });
        parent::__construct($config);
    }

    public function run($arg)
    {
        /** @var $queue Queue */
        $queue = $arg;
        for ($i = 0; $i < $queue->getCoroutineNum(); $i++) {
            $queue->getConsumer()->queue = $queue;
            Coroutine::create(function () use ($queue, $i) {
                $cacheFile = QueueDataCache::getCoroutineCacheFile($queue->getAlias(), $i);
                while (true) {
                    try {
                        $data = QueueDataCache::read($cacheFile, $queue->getLimit());
                        if (empty($data)) {
                            $data = $queue->getDriver()->pop($queue);
                            $logs = [];
                            foreach ($data as $item) {
                                $logs[] = sprintf("%s\t%s", date('i:s'), $item);
                            }
                            QueueDataCache::write(QueueDataCache::getCurrentLogFile($queue->getAlias()), $logs);
                        }

                        QueueDataCache::write($cacheFile, $data);

                        if (!empty($data)) {
                            $queue->getConsumer()->deal($data);
                            QueueDataCache::rem($cacheFile, count($data));
                        }
                    } catch (\Throwable $e) {
                        var_dump($e->getMessage());
                        break;
                    }
                    Coroutine::sleep(1);
                }
            });
        }
        return parent::run($arg); // TODO: Change the autogenerated stub
    }

    function onAccept(Socket $socket)
    {
        // TODO: Implement onAccept() method.
    }
}
