<?php
/**
 * @CreateTime:   2021/1/3 1:21 上午
 * @Author:       huizhang  <2788828128@qq.com>
 * @Copyright:    copyright(2020) Easyswoole all rights reserved
 * @Description:  延迟队列进程处理
 */

namespace Huizhang\DelayQueue;

use EasySwoole\Component\Process\Socket\AbstractUnixProcess;
use EasySwoole\Component\Process\Socket\UnixProcessConfig;
use Swoole\Coroutine;
use Swoole\Coroutine\Socket;

class ConsumerProcess extends AbstractUnixProcess
{

    public function __construct(UnixProcessConfig $config)
    {
        parent::__construct($config);
    }

    public function run($arg)
    {
        $queues = $arg;
        /** @var $queue Queue */
        foreach ($queues as $queue) {
            /** @var $consumer ConsumerInterface */
            $namespace = "{$queue->getClass()}";
            $consumer = new $namespace;
            $consumer->init();
            for ($i = 0; $i < $queue->getCoroutineNum(); $i++) {
                go(function () use ($queue, $consumer) {
                    while (true) {
                        try {
                            $data = Core::getInstance()
                                ->pop(
                                    $queue->getRedisAlias()
                                    , $queue->getAlias()
                                    , time() - $queue->getDelayTime()
                                    , $queue->getLimit()
                                );
                            if (!empty($data)) {
                                $consumer->deal($data);
                            }
                        } catch (\Throwable $e) {
                            $consumer->exception($e);
                        }
                        Coroutine::sleep(1);
                    }
                });
            }
        }
        return parent::run($arg); // TODO: Change the autogenerated stub
    }

    function onAccept(Socket $socket)
    {
        // TODO: Implement onAccept() method.
    }
}
